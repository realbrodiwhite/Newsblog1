/**
 * The, channel in which the version is available
 */
type Channel = 'stable' | 'beta';
/**
 * Defines an association of a Flutter version with its compatible Dart version
 */
type Version = {
    flutter: string;
    dart: string;
    channel: Channel;
};
type ChannelessVersion = Partial<Omit<Version, 'channel'>>;
type ComparableVersion = {
    flutterNumber: number;
    dartNumber: number;
} & Version;
declare const SupportedVersions: ComparableVersion[];
declare const FallbackStableVersion: ComparableVersion;
declare const FallbackBetaVersion: ComparableVersion;
declare const UnknownDartVersion = "?";
/**
 * Converts a version in the semantic versioning schema in a number
 * @param version - Semantic version number to be converted
 * @returns Parsed number or 0 if passed version is '-'
 */
declare function versionToNumber(version: string): number;

/**
 * Find the supported Flutter version for a pubspec.yaml/lock file.
 *
 * @param yaml - A string describing the content of the pubspec file.
 * @returns The matched {@link Version} that is supported  for the project described by the pubspec file.
 */
declare function export_default(yaml: string, channel?: Channel): Version;

export { Channel, ChannelessVersion, ComparableVersion, FallbackBetaVersion, FallbackStableVersion, SupportedVersions, UnknownDartVersion, Version, export_default as default, versionToNumber };
